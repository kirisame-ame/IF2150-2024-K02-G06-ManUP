[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "views.components.navbar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "views.components.navbar",
        "description": "views.components.navbar",
        "detail": "views.components.navbar",
        "documentation": {}
    },
    {
        "label": "Navbar",
        "importPath": "views.components.navbar",
        "description": "views.components.navbar",
        "isExtraImport": true,
        "detail": "views.components.navbar",
        "documentation": {}
    },
    {
        "label": "read_transaction",
        "importPath": "controllers.transactionC",
        "description": "controllers.transactionC",
        "isExtraImport": true,
        "detail": "controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "create_transaction",
        "importPath": "controllers.transactionC",
        "description": "controllers.transactionC",
        "isExtraImport": true,
        "detail": "controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "delete_transaction",
        "importPath": "controllers.transactionC",
        "description": "controllers.transactionC",
        "isExtraImport": true,
        "detail": "controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "update_transaction",
        "importPath": "controllers.transactionC",
        "description": "controllers.transactionC",
        "isExtraImport": true,
        "detail": "controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "get_transaction",
        "importPath": "controllers.transactionC",
        "description": "controllers.transactionC",
        "isExtraImport": true,
        "detail": "controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "getNewId",
        "importPath": "controllers.transactionC",
        "description": "controllers.transactionC",
        "isExtraImport": true,
        "detail": "controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "HomeUI",
        "importPath": "views.home",
        "description": "views.home",
        "isExtraImport": true,
        "detail": "views.home",
        "documentation": {}
    },
    {
        "label": "TransactionUI",
        "importPath": "views.transaction",
        "description": "views.transaction",
        "isExtraImport": true,
        "detail": "views.transaction",
        "documentation": {}
    },
    {
        "label": "read_transaction",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def read_transaction():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    return transaction\ndef create_transaction(data):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = pd.concat([transaction, pd.DataFrame([data])], ignore_index=True)\n    transaction.to_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'), index=False)\n    return transaction\ndef delete_transaction(id):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))        ",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "create_transaction",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def create_transaction(data):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = pd.concat([transaction, pd.DataFrame([data])], ignore_index=True)\n    transaction.to_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'), index=False)\n    return transaction\ndef delete_transaction(id):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))        \n    transaction = transaction[transaction['id'] != id]\n    transaction.to_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'), index=False)\n    return transaction",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "delete_transaction",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def delete_transaction(id):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))        \n    transaction = transaction[transaction['id'] != id]\n    transaction.to_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'), index=False)\n    return transaction\ndef update_transaction(data):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    id = data['id']\n    # Select only the relevant keys from the data dictionary\n    update_data = pd.DataFrame([data], columns=transaction.columns)",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "update_transaction",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def update_transaction(data):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    id = data['id']\n    # Select only the relevant keys from the data dictionary\n    update_data = pd.DataFrame([data], columns=transaction.columns)\n    transaction.loc[transaction['id'] == id] = update_data\n    transaction.to_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'), index=False)\n    return transaction\ndef get_transaction(id):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "get_transaction",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def get_transaction(id):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['id'] == id]\n    return transaction\ndef total_transaction():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    income = transaction[transaction['type'] == 'income']['amount'].sum()\n    expense = transaction[transaction['type'] == 'expense']['amount'].sum()\n    total = income - expense\n    return total",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "total_transaction",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def total_transaction():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    income = transaction[transaction['type'] == 'income']['amount'].sum()\n    expense = transaction[transaction['type'] == 'expense']['amount'].sum()\n    total = income - expense\n    return total\ndef get_transaction_by_type(type):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['type'] == type]\n    return transaction",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "get_transaction_by_type",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def get_transaction_by_type(type):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['type'] == type]\n    return transaction\ndef get_transaction_by_description(description):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['description'] == description]\n    return transaction\ndef get_transaction_by_date(date):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "get_transaction_by_description",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def get_transaction_by_description(description):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['description'] == description]\n    return transaction\ndef get_transaction_by_date(date):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['date'] == date]\n    return transaction\ndef sort_transaction_by_date():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "get_transaction_by_date",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def get_transaction_by_date(date):\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction[transaction['date'] == date]\n    return transaction\ndef sort_transaction_by_date():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction.sort_values('date')\n    return transaction\ndef getNewId():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "sort_transaction_by_date",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def sort_transaction_by_date():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    transaction = transaction.sort_values('date')\n    return transaction\ndef getNewId():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    return transaction['id'].max() + 1",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "getNewId",
        "kind": 2,
        "importPath": "src.controllers.transactionC",
        "description": "src.controllers.transactionC",
        "peekOfCode": "def getNewId():\n    transaction = pd.read_csv(os.path.join(os.getcwd(), 'src', 'models', 'transaction.csv'))\n    return transaction['id'].max() + 1",
        "detail": "src.controllers.transactionC",
        "documentation": {}
    },
    {
        "label": "Navbar",
        "kind": 6,
        "importPath": "src.views.components.navbar",
        "description": "src.views.components.navbar",
        "peekOfCode": "class Navbar(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setup_ui()\n    def setup_ui(self):\n        # Navigation bar\n        nav_bar = QHBoxLayout(self)\n        self.btn_home = QPushButton(\"Home\")\n        self.btn_transaction = QPushButton(\"Transactions\")\n        self.btn_budget = QPushButton(\"Budget\")",
        "detail": "src.views.components.navbar",
        "documentation": {}
    },
    {
        "label": "HomeUI",
        "kind": 6,
        "importPath": "src.views.home",
        "description": "src.views.home",
        "peekOfCode": "class HomeUI(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setup_ui()\n    def setup_ui(self):\n        # Main layout\n        main_layout = QVBoxLayout(self)\n        # Central content placeholder\n        self.content = QLabel(\"Welcome to the Home Page!\")\n        # Add nav bar and content to the main layout",
        "detail": "src.views.home",
        "documentation": {}
    },
    {
        "label": "TransactionUI",
        "kind": 6,
        "importPath": "src.views.transaction",
        "description": "src.views.transaction",
        "peekOfCode": "class TransactionUI(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setup_ui()\n    def setup_ui(self):\n        # Main layout\n        main_layout = QVBoxLayout(self)\n        # Central content placeholder\n        self.content = QLabel(\"This is the Transactions Page.\")\n        # Add nav bar and content to the main layout",
        "detail": "src.views.transaction",
        "documentation": {}
    },
    {
        "label": "HomeController",
        "kind": 6,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "class HomeController(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"ManUP Budgeting App\")\n        # Initialize the UI\n        self.view = HomeUI()\n        self.setCentralWidget(self.view)\n        # Connect buttons to methods\n        self.navbar = Navbar()\n        self.view.layout().setMenuBar(self.navbar)",
        "detail": "src.app",
        "documentation": {}
    }
]